■Play Framework

・概要
サーバサイドJava(とScala)のためのフレームワーク。
「スピード感」と「変更に対する強さ」を重視。

・特徴
Ruby on Railsの以下の2つのルールを踏襲。
1. 繰り返しを避けよ
　リファクタリングしやすいフレームワークであること。
変更の誤りを確認するためのテスト環境が充実している。
開発時には詳細なエラー情報を出力できる。
2. 設定より規約
　フレームワークで一定のルールを定め、それに従うことでXMLなどの設定ファイルを書かなくても動くような仕組みを提供。

ソースが更新されると即座に変更が反映されるようになっている。

CPUリソースやメモリ使用量が少なく、軽量なシステム開発に向いている。

・導入
必要条件：Java SDKのバージョン6以上が必要。
→Play frameworkの最新版のダウンロード
→インストール。配置したディレクトリに環境変数「Path」を設定

■Spring Framework

・概要
Webシステム、Webサービスを作るのに適している。
軽量かつ開発がしやすく、DIとAOPを中核とした豊富な機能を搭載。

・特徴
「仕様変更に弱い」「プログラム単体でのテストが困難」「メンテナンスや再利用が困難」などの諸問題に対応可能。

NoSQL/クラウドへの接続、Twitterなどの特定のサービスとの連携など、新しい機能をいち早く取り入れている。

全レイヤーの基盤となるDI×AOPコンテナを持ち、依存するレイヤーをインタフェースベースで疎結合連結させる。この仕組みで疎結合性を高めることにより開発効率を高めている。

DI: クラス(ライブラリ)の動作に必要な他のクラスの生成をSpringに任せる。これにより、クラスやライブラリ間の依存性が排除され、単体テストをやりやすくしたり、それぞれのクラスやライブラリの再利用性を高める。

AOP: クラスには本質的な処理のみを記述、共通化できる処理をアスペクトに記述。

・導入
Springのjarをダウンロード
→取得したjarをクラスパスへ通す
→Apache Commons Loggingのjarをダウンロード

■Struts

・概要
サーブレットコンテナ上で動作するWebアプリケーションフレームワーク。

リクエストされたURLによって、実行する処理(Actionクラス)を、xmlファイルの定義(struts-config)に従い実行し、Actionクラスの処理結果によって、struts-configに定義された画面ファイル(jspファイル)を表示する。

・特徴
MVCモデルに則った見通しの良いプログラム構造で開発可能。

入力チェック処理(Validator)が用意されており、Actionフォーム毎に設定ファイルへ定義して利用できる。

画面作成にはタグライブラリの利用によりコードが排除でき、見やすいタグでの記述ができる。